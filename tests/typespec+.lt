;;; -*- mode: lisp; package: cl.test.typespec+ -*-
;;;
;;; tests/typespec+.lt
;;;

(defpackage cl.test.typespec+
  (:use :lisp :editor))
(in-package :cl.test.typespec+)

(require "cl")
(cl::install)

(require "lisp-unit")
(use-package :lisp-unit)

(remove-all-tests)

;;; helper macro

(defmacro do-datum/typespec ((datum-var typespec-var assoc-var) data &body body)
  (let (($data (gensym))
        ($all-typespecs (gensym)))
    `(let* ((,$data (list ,@(mapcar (lambda (d) `(cons ,(car d) (list ,@(cdr d)))) data)))
            (,$all-typespecs (remove-duplicates
                              (apply #'append (mapcar #'cdr ,$data)))))
       (dolist (,datum-var (mapcar #'car ,$data))
         (dolist (,typespec-var ,$all-typespecs)
           (let ((,assoc-var (member ,typespec-var (cdr (assoc ,datum-var ,$data))
                                     :test #'equal)))
             ,@body))))))

(defstruct example-struct)

(define-test typep-standard-atomic-typespecs
  (do-datum/typespec (datum typespec found)
      ((3 'fixnum 'integer 'number 'atom)
       ("hello" 'string 'atom 'sequence)
       (:hello 'keyword 'symbol 'atom)
       (0 'fixnum 'integer 'number 'atom)
       (t 'symbol 'atom)
       (nil 'symbol 'list 'atom 'null 'sequence)
       ('(foo bar) 'cons 'list 'sequence)
       ((find-package :lisp) 'package 'atom)
       (*standard-output* 'stream 'atom)
       ((make-string-output-stream) 'stream 'atom)
       (#\a 'character 'base-character 'standard-char 'atom)
       ((lambda (x) x) 'function 'atom)
       (#'car 'function 'compiled-function 'atom)
       ((make-hash-table) 'hash-table 'atom)
       ((make-random-state) 'random-state 'atom)
       (*random-state* 'random-state 'atom)
       (*readtable* 'readtable 'atom)
       ((make-example-struct) 'example-struct 'structure 'atom)
       )
    (assert-equality #'logically-equal found (typep datum typespec)
      datum typespec)))

(define-test typep-editor-atomic-typespecs
  (let ((marker (make-marker)))
    (unwind-protect
        (do-datum/typespec (datum typespec found)
            (((selected-buffer) 'ed:buffer 'atom)
             (marker 'ed:marker 'atom)
             ((compile-regexp "^hel\\{2\\}o$") 'ed:regexp 'atom)
             ((selected-window) 'window 'atom)
             (nil 'symbol 'null 'list 'atom)
             ;; ed:process ed:syntax-table ed:menu ed:dde-handle ed:oledata
             )
          (assert-equality #'logically-equal found (typep datum typespec)
            datum typespec))
      (delete-marker marker))))

(define-test typep-compound-typespecs
  (let ((sym (gensym)))
    (do-datum/typespec (datum typespec found)
        ((sym `(satisfies ,#'(lambda (x) (eql x sym))) t '(not fixnum))
         (:foo '(member :foo :bar :baz) '(not fixnum) '(and symbol keyword) t)
         (3 '(eql 3) t)
         (:hoge '(eql :hoge) '(not fixnum) '(and symbol keyword) t)
         (nil '(eql nil) '(not fixnum) '(or structure list hash-table) t)
         ("hello" '(not fixnum) t)
         (:whatever '(and symbol keyword) '(not fixnum) t)
         ((make-hash-table) '(or structure list hash-table) '(not fixnum) t)
         ('(foo bar baz) '(or structure list hash-table) '(not fixnum) t)
         (33 t)
         )
      (assert-equality #'logically-equal found (typep datum typespec)
        datum typespec))))


;;; tests/typespec+.lt ends here
