;;; -*- mode: lisp; package: cl.test.typespec+ -*-
;;;
;;; tests/typespec+.lt
;;;

(defpackage cl.test.typespec+
  (:use :lisp :editor))
(in-package :cl.test.typespec+)

(require "cl")
(cl::install)

(require "lisp-unit")
(use-package :lisp-unit)

(remove-all-tests)

;;; helper macro

(defmacro do-datum/typespec ((datum-var typespec-var assoc-var) data &body body)
  (let (($all-typespecs (gensym)))
    `(let* ((,$all-typespecs (remove-duplicates
                              (apply #'append (mapcar #'cdr ,data)))))
       (dolist (,datum-var (mapcar #'car ,data))
         (dolist (,typespec-var ,$all-typespecs)
           (let ((,assoc-var (member ,typespec-var (cdr (assoc ,datum-var ,data))
                                     :test #'equal)))
             ,@body))))))

;;;
;;; * Example typespecs/data

(defstruct example-struct)

(defparameter *standard-atomic-typespecs/data*
  (list (list 3 'fixnum 'integer 'number 'atom)
        (list "hello" 'string 'atom 'sequence)
        (list :hello 'keyword 'symbol 'atom)
        (list 0 'fixnum 'integer 'number 'atom)
        (list t 'symbol 'atom)
        (list nil 'symbol 'list 'atom 'null 'sequence)
        (list '(foo bar) 'cons 'list 'sequence)
        (list (find-package :lisp) 'package 'atom)
        (list *standard-output* 'stream 'atom)
        (list (make-string-output-stream) 'stream 'atom)
        (list #\a 'character 'base-character 'standard-char 'atom)
        (list (lambda (x) x) 'function 'atom)
        (list #'car 'function 'compiled-function 'atom)
        (list (make-hash-table) 'hash-table 'atom)
        (list (make-random-state) 'random-state 'atom)
        (list *random-state* 'random-state 'atom)
        (list *readtable* 'readtable 'atom)
        (list (make-example-struct) 'example-struct 'atom)
        ))

(defparameter *editor-atomic-typespecs/data*
  (let ((marker (make-marker)))
    (unwind-protect
        (list (list (selected-buffer) 'ed:buffer 'atom)
              (list marker 'ed:marker 'atom)
              (list (compile-regexp "^hel\\{2\\}o$") 'ed:regexp 'atom)
              (list (selected-window) 'window 'atom)
              (list nil 'symbol 'null 'list 'atom)
              ;; ed:process ed:syntax-table ed:menu ed:dde-handle ed:oledata
              )
      (delete-marker marker))))

(defparameter *standard-compound-typespecs/data*
  (let ((sym (gensym)))
    (list (list sym `(satisfies ,#'(lambda (x) (eql x sym))) t '(not fixnum))
          (list :foo '(member :foo :bar :baz) '(not fixnum) '(and symbol keyword) t)
          (list 3 '(eql 3) t)
          (list :hoge '(eql :hoge) '(not fixnum) '(and symbol keyword) t)
          (list nil '(eql nil) '(not fixnum) '(or structure list hash-table) t)
          (list "hello" '(not fixnum) t)
          (list :whatever '(and symbol keyword) '(not fixnum) t)
          (list (make-hash-table) '(or structure list hash-table) '(not fixnum) t)
          (list '(foo bar baz) '(or structure list hash-table) '(not fixnum) t)
          (list 33 t)
          )))

;;;;
;;;; * for function typep

(define-test typep-standard-atomic-typespecs
  (do-datum/typespec (datum typespec found) *standard-atomic-typespecs/data*
    (assert-equality #'logically-equal found (typep datum typespec)
      datum typespec)))

(define-test typep-editor-atomic-typespecs
  (do-datum/typespec (datum typespec found) *editor-atomic-typespecs/data*
    (assert-equality #'logically-equal found (typep datum typespec)
      datum typespec)))

(define-test typep-compound-typespecs
  (do-datum/typespec (datum typespec found) *standard-compound-typespecs/data*
    (assert-equality #'logically-equal found (typep datum typespec)
      datum typespec)))

(define-test typep-compound-cons
  (assert-true (typep '(foo bar) 'cons))
  (assert-true (typep '(foo bar) '(cons symbol cons)))
  (assert-true (typep '(foo bar) '(cons symbol (cons symbol null))))
  (assert-false (typep 33 'cons))
  (assert-false (typep 33 '(cons symbol cons)))
  (assert-false (typep '(foo bar) '(cons number cons)))
  (assert-false (typep '(foo) '(cons number null)))
  (assert-true (typep '(foo) '(cons symbol null)))
  (assert-true (typep '(foo bar) '(cons * (cons symbol null))))
  )


;;; TODO: write tests: chars, numbers, arrays

;;;;
;;;; * Tests for optimize-typep-call

;;; optimized form should produce same result as original form

(defmacro %assert-typespec-optimize (datum typespec &rest more)
  (let (($x (gensym)))
    `(assert-equality #'logically-equal
         (typep ,datum ,typespec)
         (funcall `(lambda (,',$x)
                     ,(cl::optimize-typep-call `(typep ,',$x ',,typespec)))
                  ,datum)
       ,@more)))

;;; expands into something like this:
;; (let ((datum 3)
;;       (typespec 'fixnum))
;;   (assert-equality #'logically-equal
;;       (typep datum typespec)
;;       (funcall `(lambda (#1=#:Gxxx)
;;                   (cl::optimize-typep-call `(typep ,#1# ',typespec)))
;;                datum)))

(define-test optimize-standard-atomic-typespecs
  (do-datum/typespec (datum typespec found) *standard-atomic-typespecs/data*
    (%assert-typespec-optimize datum typespec)))

(define-test optimize-editor-typespecs
  (do-datum/typespec (datum typespec found) *editor-atomic-typespecs/data*
    (%assert-typespec-optimize datum typespec)))

(define-test optimize-compound-typespecs
  (do-datum/typespec (datum typespec found) *standard-compound-typespecs/data*
    (%assert-typespec-optimize datum typespec)))


(defmacro %assert-optimized-form (object typespec expected)
  `(assert-equality #'form-equal
       ,expected
       (cl::optimize-typep-call '(typep ,object ,typespec))))

#+xyzzy
(setf (get '%assert-optimized-form 'ed:lisp-indent-hook) 2)

(define-test optimize-typep-and
  (%assert-optimized-form X '(and) t)
  (%assert-optimized-form X 'and t)
  (%assert-optimized-form X '(and number) '(numberp X))
  (%assert-optimized-form X '(and atom number)
    `(let ((#:G01 X))
       (and (atom #:G01) (numberp #:G01))))
  (%assert-optimized-form X '(and number symbol)
    `(let ((#:G01 X))
       (and (numberp #:G01) (symbolp #:G01))))
  )

;;; tests/typespec+.lt ends here
