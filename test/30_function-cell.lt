;;; -*- mode: lisp; package: test.ansify.function-cell -*-
;;;
;;; test/30_function-cell.lt
;;;


;;; Code:

(require "lisp-unit")
(require "ansify/function")

(defpackage :test.ansify.function-cell
  (:use :lisp :lisp-unit))

(in-package :test.ansify.function-cell)

;(ansify::install)
;#|
(mapc (lambda (name) (shadowing-import (find-symbol (string name) :ansify)))
      '(#:defun
        #:fdefinition
        #:fboundp
        #:fmakunbound
        ))

(mapc (lambda (name) (shadowing-import (find-symbol (string name) :ansify.ext)))
      '(#:fwrap #:define-fwrapper #:funwrap #:call-next-function
        ))
;|#

(remove-all-tests :test.ansify.function-cell)


;;;; example data

(defun foo (x) (+ x 3))
(defun bar (y) (* y 3))

(shadow 'baz)

(defconstant +foo-definition+ #'foo)
(defconstant +bar-definition+ #'bar)

(defvar *table* (make-hash-table))

(defun datum (key) (gethash key *table*))
(defun (setf datum) (value key) (setf (gethash key *table*) value))


;;;; Accessor ansify.ext:function-info

(define-test ext-function-info
  (progn
    ;; on empty lambda-list
    (let ((FN (eval (read-from-string "(lambda () 3)"))))
      ;; NOTE: The accessor modifies the function object destructively, which
      ;; in turn, modifies test code and makes first test (for nil) fail if
      ;; you write above lambda expr normally. So using `read-from-string`.
      (assert-eql nil   (ansify.ext:function-info FN 'key))
      (assert-eql #\LFD (setf (ansify.ext:function-info FN 'key) #\LFD))
      (assert-eql #\LFD (ansify.ext:function-info FN 'key))))
  (progn
    ;; on lambda-list with some stuff in it
    (let ((FN (eval (read-from-string "(lambda (a b) (+ a b))"))))
      (assert-eql nil   (ansify.ext:function-info FN 'key))
      (assert-eql #\LFD (setf (ansify.ext:function-info FN 'key) #\LFD))
      (assert-eql #\LFD (ansify.ext:function-info FN 'key) #\LFD)))
  )


;;;; Function fdefinition

(define-test fdefinition-read-symbol
  (assert-eql (symbol-function 'foo) (fdefinition 'foo))
  (assert-eql (symbol-function 'bar) (fdefinition 'bar)))

(define-test fdefinition-write-symbol
  (unwind-protect
      (labels ((foo (x)))
        (setf (fdefinition 'foo) (fdefinition 'bar))
        (assert-eql (fdefinition 'foo) (fdefinition 'bar)))
    (setf (symbol-function 'foo) +foo-definition+
          (symbol-function 'bar) +bar-definition+)))

(define-test fdefinition-read-setf-name
  (let ((setf-function-symbol (ansify::get-setf-function-symbol '(setf datum))))
    (assert-eql
        (symbol-function setf-function-symbol)
        (fdefinition '(setf datum))
      setf-function-symbol)))

(define-test fdefinition-write-setf-name
  (let ((alt-setf-fn-called-p nil))
    (labels ((alt-setf-fn (&rest args)
               (setf alt-setf-fn-called-p t)
               '#:alt-return))
      (si:*set-function-name #'alt-setf-fn 'alt-setf-fn)
      ;; NOTE: this assertion fails due to bug that (setf symbol-function)
      ;; returning symbol instead of function.
      ;(assert-eql #'alt-setf-fn (setf (fdefinition '(setf datum)) #'alt-setf-fn))
      (setf (fdefinition '(setf datum)) #'alt-setf-fn)
      (progn
        (setf (datum 3) "hi")
        (assert-true alt-setf-fn-called-p)))))


;;;; Function fboundp

(define-test fboundp
  (assert-true (fboundp 'foo))
  (assert-true (fboundp 'bar))
  (assert-true (fboundp '(setf datum)))
  ;; NOTE: Assuming no one defines function and setf function for `baz`.
  (assert-false (fboundp 'baz))
  (assert-false (fboundp '(setf baz))))


;;;; Function fmakunbound

(defun hoge () :hoge)

(defun (setf hoge) (&rest #:ignore) "setf hoge")

(define-test fmakunbound
  (let ((hoge-def #'hoge))
    (unwind-protect
        (progn
          (progn
            (fmakunbound 'hoge)
            (assert-error 'undefined-function (hoge)))
          (progn
            (fmakunbound '(setf hoge))
            ;; NOTE: In ANSI, following setf form should expand into call
            ;; for setf-function (setf hoge) and retult in an error at
            ;; run-time.
            ;; Currently, ansify uses setf-expander for readers who has
            ;; corresponding setf-function defined via `defun`, and it is
            ;; deleted when `fmakunbound` it. As a result, xyzzy signals
            ;; an error when expanding setf form instead of run-time.
            (assert-error 'error (setf (hoge 3) "fuga"))))
      (setf (symbol-function 'hoge) hoge-def))))


;;;; fwrapper

(define-test fwrapper
  (define-fwrapper just-call-next-function ()
    (call-next-function))
  (define-fwrapper return-nil ()
    nil)
  (define-fwrapper additional-value-foo ()
    (list (call-next-function) "foo"))
  (progn
    (let ((fn (lambda () 3)))
      (fwrap fn 'return-nil 'test)
      (assert-eql nil (funcall fn))
      (funwrap fn 'test)
      (assert-eql 3 (funcall fn))))
  (progn
    (let ((fn (lambda () 3)))
      (fwrap fn 'just-call-next-function 'test)
      (assert-eql 3 (funcall fn))
      (funwrap fn 'test)
      (assert-eql 3 (funcall fn))))
  (progn
    (let ((fn (lambda () 3)))
      (fwrap fn 'additional-value-foo 'test)
      (assert-equal '(3 "foo") (funcall fn))
      (funwrap fn 'test)
      (assert-eql 3 (funcall fn))))
  (progn ;; nesting
    (let ((fn (lambda () "hello")))
      (fwrap fn 'additional-value-foo 'inner)
      (fwrap fn 'additional-value-foo 'outer)
      (assert-equal '(("hello" "foo") "foo") (funcall fn))
      (funwrap fn 'inner)
      (assert-equal '("hello" "foo") (funcall fn)))
    ))

;;; test/30_function-cell.lt ends here.
